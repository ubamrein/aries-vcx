interface ProfileHolder {

};

dictionary WalletConfig {
    string wallet_name;
    string wallet_key;
    string wallet_key_derivation;
    string? wallet_type;
    string? storage_config;
    string? storage_credentials;
    string? rekey;
    string? rekey_derivation_method;
};

dictionary ConnectionState {
    ConnectionRole role;
    ConnectionProtocolState protocol_state;
};

enum ConnectionRole {
    "Invitee",
    "Inviter",
};

enum ConnectionProtocolState {
    "Initial",
    "Invited",
    "Requested",
    "Responded",
    "Completed",
};


dictionary PairwiseInfo {
    string pw_did;
    string pw_vk;
};

dictionary Messages {
    sequence<string> messages;
};
dictionary TypeMessage {
    string ty;
    string content;
};
dictionary SocialId {
    string name;
    string email;
    string phone;
    string photo;
};

interface Connection {
    [Throws=VcxUniFFIError]
    ConnectionState get_state();

    [Throws=VcxUniFFIError]
    TypeMessage unpack_msg(ProfileHolder profile, string msg);

    [Throws=VcxUniFFIError]
    PairwiseInfo pairwise_info();

    [Throws=VcxUniFFIError]
    void accept_invitation(ProfileHolder profile, string invitation);

    [Throws=VcxUniFFIError]
    void handle_request(ProfileHolder profile, string request, string service_endpoint, sequence<string> routing_keys);

    [Throws=VcxUniFFIError]
    void handle_response(ProfileHolder profile, string response);

    [Throws=VcxUniFFIError]
    void send_request(ProfileHolder profile, string service_endpoint, sequence<string> routing_keys);

    [Throws=VcxUniFFIError]
    void send_response(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    void send_ack(ProfileHolder profile);
};



interface Issuance {
    [Throws=VcxUniFFIError]
    void receive_offer(string offer);
    [Throws=VcxUniFFIError]
    void send_request(ProfileHolder profile);
    [Throws=VcxUniFFIError]
    void process_credential(ProfileHolder profile, string credential);
    [Throws=VcxUniFFIError]
    CredentialEntry get_credential();
    [Throws=VcxUniFFIError]
    SocialId get_indy_cred(string cred);
};

[Error]
enum VcxUniFFIError {
    "AriesVcxError",
    "SerializationError",
    "InternalError",
};

[Error]
enum NativeError {
    "InternalError"
};

dictionary CredentialEntry {
    string credential_id;
    string credential;
};

namespace vcx {
    [Throws=VcxUniFFIError]
    ProfileHolder new_indy_profile(WalletConfig wallet_config, NativeClient client);

    [Throws=VcxUniFFIError]
    Connection create_inviter(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    Connection create_invitee(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    Issuance create_vc_receiver(string source_id, Connection connection);
    Messages receive_msgs(string id);

};


callback interface NativeTransport {
    [Throws=NativeError]
    void send_message(sequence<u8> msg, string url);
};

interface NativeClient {
    constructor(NativeTransport transport);
};


interface Proof {
    [Name=create_from_request,Throws=VcxUniFFIError]
    constructor( Connection connection, string source_id, string presentation_request);
    [Throws=VcxUniFFIError]
    string select_credentials(ProfileHolder profile);
};
